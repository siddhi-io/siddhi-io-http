{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO HTTP The siddhi-io-http extension is an extension to Siddhi that receives and publishes events via HTTP and HTTPS transports, calls external services, and serves incoming requests and provide synchronous responses. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 2.3.7 . Features http ( Sink ) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. http-call ( Sink ) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. http-request ( Sink ) (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. http-response ( Sink ) (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . http-service-response ( Sink ) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . sse-server ( Sink ) HTTP SSE sink sends events to all subscribers. websubhub ( Sink ) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source http ( Source ) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . http-call-response ( Source ) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. http-request ( Source ) (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. http-response ( Source ) (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. http-service ( Source ) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. sse ( Source ) HTTP SSE source send a request to a given url and listen to the response stream. websubhub ( Source ) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-http","text":"The siddhi-io-http extension is an extension to Siddhi that receives and publishes events via HTTP and HTTPS transports, calls external services, and serves incoming requests and provide synchronous responses. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO HTTP"},{"location":"#download","text":"Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 2.3.7 .","title":"Latest API Docs"},{"location":"#features","text":"http ( Sink ) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. http-call ( Sink ) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. http-request ( Sink ) (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. http-response ( Sink ) (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . http-service-response ( Sink ) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . sse-server ( Sink ) HTTP SSE sink sends events to all subscribers. websubhub ( Sink ) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source http ( Source ) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . http-call-response ( Source ) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. http-request ( Source ) (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. http-response ( Source ) (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. http-service ( Source ) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. sse ( Source ) HTTP SSE source send a request to a given url and listen to the response stream. websubhub ( Source ) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.10/","text":"API Docs - v1.0.10 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream:{ events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"1.0.10"},{"location":"api/1.0.10/#api-docs-v1010","text":"","title":"API Docs - v1.0.10"},{"location":"api/1.0.10/#sink","text":"","title":"Sink"},{"location":"api/1.0.10/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}',client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream:{ events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'","title":"http (Sink)"},{"location":"api/1.0.10/#source","text":"","title":"Source"},{"location":"api/1.0.10/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.0.18/","text":"API Docs - v1.0.18 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' ,client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream:{ events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"1.0.18"},{"location":"api/1.0.18/#api-docs-v1018","text":"","title":"API Docs - v1.0.18"},{"location":"api/1.0.18/#sink","text":"","title":"Sink"},{"location":"api/1.0.18/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\". User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' ,client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20','client.bootstrap.worker.group.size:10' ,client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream:{ events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'","title":"http (Sink)"},{"location":"api/1.0.18/#source","text":"","title":"Source"},{"location":"api/1.0.18/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.0.29/","text":"API Docs - v1.0.29 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"1.0.29"},{"location":"api/1.0.29/#api-docs-v1029","text":"","title":"API Docs - v1.0.29"},{"location":"api/1.0.29/#sink","text":"","title":"Sink"},{"location":"api/1.0.29/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/1.0.29/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/1.0.29/#source","text":"","title":"Source"},{"location":"api/1.0.29/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.0.29/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/1.0.39/","text":"API Docs - v1.0.39 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' STRING No No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"1.0.39"},{"location":"api/1.0.39/#api-docs-v1039","text":"","title":"API Docs - v1.0.39"},{"location":"api/1.0.39/#sink","text":"","title":"Sink"},{"location":"api/1.0.39/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/1.0.39/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/1.0.39/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/1.0.39/#source","text":"","title":"Source"},{"location":"api/1.0.39/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.0.39/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= STRING , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/1.0.39/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' STRING No No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/1.0.4/","text":"API Docs - v1.0.4 Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No System Parameters Name Description Default Value Possible Parameters latency.metrics.enabled Property to enable metrics logs to monitor transport latency for config. true true false server.bootstrap.socket.timeout property to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received. 15 Any integer server.bootstrap.boss.group.size property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer server.bootstrap.worker.group.size property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer default.host The default host of the transport. 0.0.0.0 Any valid host http.port The default port if the default scheme is 'http'. 9763 Any valid port https.port The default port if the default scheme is 'https'. 9443 Any valid port default.protocol The default protocol. http http https https.keystore.file The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file https.keystore.password The default keystore password. wso2carbon String of keystore password https.cert.password The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source configuration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , client.truststore.path= STRING , client.truststore.password= STRING , headers= STRING , method= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No client.truststore.path The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No client.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes Yes method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes Yes System Parameters Name Description Default Value Possible Parameters latency.metrics.enabled Property to enable metrics logs to monitor transport latency for config. true Any Integer server.bootstrap.socket.timeout Property to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received. 15 Any Integer server.bootstrap.boss.group.size Property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer server.bootstrap.worker.group.size Property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer default.protocol The default protocol. http http https https.truststore.file The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks https.truststore.password The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}', @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream:{ events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'","title":"1.0.4"},{"location":"api/1.0.4/#api-docs-v104","text":"","title":"API Docs - v1.0.4"},{"location":"api/1.0.4/#source","text":"","title":"Source"},{"location":"api/1.0.4/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . If required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 STRING Yes No System Parameters Name Description Default Value Possible Parameters latency.metrics.enabled Property to enable metrics logs to monitor transport latency for config. true true false server.bootstrap.socket.timeout property to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received. 15 Any integer server.bootstrap.boss.group.size property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer server.bootstrap.worker.group.size property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer default.host The default host of the transport. 0.0.0.0 Any valid host http.port The default port if the default scheme is 'http'. 9763 Any valid port https.port The default port if the default scheme is 'https'. 9443 Any valid port default.protocol The default protocol. http http https https.keystore.file The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file https.keystore.password The default keystore password. wso2carbon String of keystore password https.cert.password The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source configuration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.0.4/#sink","text":"","title":"Sink"},{"location":"api/1.0.4/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , client.truststore.path= STRING , client.truststore.password= STRING , headers= STRING , method= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No client.truststore.path The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No client.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as a HTTP request headers. There can be any number of headers concatenated on following format. header1:value1#header2:value2. User can include content-type header if he need to any specific type for payload if not system get the mapping type as the content-Type header (ie. @map(xml):application/xml,@map(json):application/json,@map(text):plain/text ) and if user does not include any mapping type then system gets the 'plain/text' as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes Yes method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes Yes System Parameters Name Description Default Value Possible Parameters latency.metrics.enabled Property to enable metrics logs to monitor transport latency for config. true Any Integer server.bootstrap.socket.timeout Property to configure specified timeout in milliseconds which server socket will block for this amount of time for http message content to be received. 15 Any Integer server.bootstrap.boss.group.size Property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. 4 Any integer server.bootstrap.worker.group.size Property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. 8 Any integer default.protocol The default protocol. http http https https.truststore.file The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks https.truststore.password The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers='{{headers}}', @map(type='xml' , @payload('{{payloadBody}}')))define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream:{ events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ,POST,Content-Length:24#Content-Location:USA#Retry-After:120}Above event will generate output as below.~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headersContent-Length:24,Content-Location:'USA',Retry-After:120,Content-Type:'application/xml',HTTP_METHOD:'POST',~Output http event propertiesHTTP_METHOD:'POST',HOST:'localhost',PORT:8009PROTOCOL:'http'TO:'/foo'","title":"http (Sink)"},{"location":"api/1.0.45/","text":"API Docs - v1.0.45 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"1.0.45"},{"location":"api/1.0.45/#api-docs-v1045","text":"","title":"API Docs - v1.0.45"},{"location":"api/1.0.45/#sink","text":"","title":"Sink"},{"location":"api/1.0.45/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/1.0.45/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/1.0.45/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/1.0.45/#source","text":"","title":"Source"},{"location":"api/1.0.45/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.0.45/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/1.0.45/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/1.1.0/","text":"API Docs - v1.1.0 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"1.1.0"},{"location":"api/1.1.0/#api-docs-v110","text":"","title":"API Docs - v1.1.0"},{"location":"api/1.1.0/#sink","text":"","title":"Sink"},{"location":"api/1.1.0/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/1.1.0/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/1.1.0/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/1.1.0/#source","text":"","title":"Source"},{"location":"api/1.1.0/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.1.0/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/1.1.0/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/1.1.2/","text":"API Docs - v1.1.2 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"1.1.2"},{"location":"api/1.1.2/#api-docs-v112","text":"","title":"API Docs - v1.1.2"},{"location":"api/1.1.2/#sink","text":"","title":"Sink"},{"location":"api/1.1.2/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/1.1.2/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/1.1.2/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/1.1.2/#source","text":"","title":"Source"},{"location":"api/1.1.2/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.1.2/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/1.1.2/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/1.1.5/","text":"API Docs - v1.1.5 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"1.1.5"},{"location":"api/1.1.5/#api-docs-v115","text":"","title":"API Docs - v1.1.5"},{"location":"api/1.1.5/#sink","text":"","title":"Sink"},{"location":"api/1.1.5/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/1.1.5/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/1.1.5/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/1.1.5/#source","text":"","title":"Source"},{"location":"api/1.1.5/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.1.5/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/1.1.5/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/1.2.0/","text":"API Docs - v1.2.0 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"1.2.0"},{"location":"api/1.2.0/#api-docs-v120","text":"","title":"API Docs - v1.2.0"},{"location":"api/1.2.0/#sink","text":"","title":"Sink"},{"location":"api/1.2.0/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/1.2.0/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/1.2.0/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/1.2.0/#source","text":"","title":"Source"},{"location":"api/1.2.0/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.2.0/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/1.2.0/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/1.2.1/","text":"API Docs - v1.2.1 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"1.2.1"},{"location":"api/1.2.1/#api-docs-v121","text":"","title":"API Docs - v1.2.1"},{"location":"api/1.2.1/#sink","text":"","title":"Sink"},{"location":"api/1.2.1/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/1.2.1/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/1.2.1/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/1.2.1/#source","text":"","title":"Source"},{"location":"api/1.2.1/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.2.1/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/1.2.1/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/1.2.2/","text":"API Docs - v1.2.2 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , connection.pool.count= INT , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay This is mapped to TCP_NODELAY socket option which allows the network to bypass Nagle Delays by disabling Nagle's algorithm, and sending the data as soon as it's available . Setting this parameter to 'true' forces a socket to send the data in its buffer, whatever the packet size. true BOOL Yes No client.bootstrap.keepalive This parameter defines whether the tcp connection should remain open for multiple HTTP requests/responses. If this is set to 'false', HTTP connections will be closed after each request. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No connection.pool.count Number of connection pools that need to be created for the particular client. 0 INT Yes No max.pool.active.connections Maximum possible number of active connection per pool for the client. -1 INT Yes No min.pool.idle.connections Minimum allowed number of idle connections that can be existed in a pool of the client. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can be existed in a pool of the client. 100 INT Yes No min.evictable.idle.time Minimum amount of time (in milliseconds) a connection may sit idle in the pool before it is eligible for eviction. 300000ms STRING Yes No time.between.eviction.runs Time between two eviction operations (in milliseconds) on the connection pool. 30000ms STRING Yes No max.wait.time The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned. 60000 STRING Yes No test.on.borrow The indication of whether objects will be validated before being borrowed from the pool. If the object validation is failed, it will be dropped from the pool, and will attempt to borrow another. true BOOL Yes No test.while.idle The indication of whether objects will be validated by the idle object evictor (if any). If the object validation is failed, it will be dropped from the pool. true BOOL Yes No exhausted.action Action which should be taken when the maximum number of active connections are being used. This action is indicated as an integer. Possible action are as following. 0 - Fail the request when pool is exhausted. 1 - Block the request when pool is exhausted, until a connection returns to the pool. 2 - Grow the connection pool size when it's exhausted. 1 (Block when exhausted) INT Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests NONE STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests NONE STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests NONE STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests NONE STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No hostname.verification.enabled To enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"1.2.2"},{"location":"api/1.2.2/#api-docs-v122","text":"","title":"API Docs - v1.2.2"},{"location":"api/1.2.2/#sink","text":"","title":"Sink"},{"location":"api/1.2.2/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , connection.pool.count= INT , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay This is mapped to TCP_NODELAY socket option which allows the network to bypass Nagle Delays by disabling Nagle's algorithm, and sending the data as soon as it's available . Setting this parameter to 'true' forces a socket to send the data in its buffer, whatever the packet size. true BOOL Yes No client.bootstrap.keepalive This parameter defines whether the tcp connection should remain open for multiple HTTP requests/responses. If this is set to 'false', HTTP connections will be closed after each request. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No connection.pool.count Number of connection pools that need to be created for the particular client. 0 INT Yes No max.pool.active.connections Maximum possible number of active connection per pool for the client. -1 INT Yes No min.pool.idle.connections Minimum allowed number of idle connections that can be existed in a pool of the client. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can be existed in a pool of the client. 100 INT Yes No min.evictable.idle.time Minimum amount of time (in milliseconds) a connection may sit idle in the pool before it is eligible for eviction. 300000ms STRING Yes No time.between.eviction.runs Time between two eviction operations (in milliseconds) on the connection pool. 30000ms STRING Yes No max.wait.time The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned. 60000 STRING Yes No test.on.borrow The indication of whether objects will be validated before being borrowed from the pool. If the object validation is failed, it will be dropped from the pool, and will attempt to borrow another. true BOOL Yes No test.while.idle The indication of whether objects will be validated by the idle object evictor (if any). If the object validation is failed, it will be dropped from the pool. true BOOL Yes No exhausted.action Action which should be taken when the maximum number of active connections are being used. This action is indicated as an integer. Possible action are as following. 0 - Fail the request when pool is exhausted. 1 - Block the request when pool is exhausted, until a connection returns to the pool. 2 - Grow the connection pool size when it's exhausted. 1 (Block when exhausted) INT Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests NONE STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests NONE STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests NONE STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests NONE STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No hostname.verification.enabled To enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/1.2.2/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/1.2.2/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/1.2.2/#source","text":"","title":"Source"},{"location":"api/1.2.2/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/1.2.2/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/1.2.2/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/2.0.0/","text":"API Docs - v2.0.0 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"2.0.0"},{"location":"api/2.0.0/#api-docs-v200","text":"","title":"API Docs - v2.0.0"},{"location":"api/2.0.0/#sink","text":"","title":"Sink"},{"location":"api/2.0.0/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/2.0.0/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/2.0.0/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/2.0.0/#source","text":"","title":"Source"},{"location":"api/2.0.0/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/2.0.0/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/2.0.0/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/2.0.4/","text":"API Docs - v2.0.4 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"2.0.4"},{"location":"api/2.0.4/#api-docs-v204","text":"","title":"API Docs - v2.0.4"},{"location":"api/2.0.4/#sink","text":"","title":"Sink"},{"location":"api/2.0.4/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/2.0.4/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/2.0.4/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/2.0.4/#source","text":"","title":"Source"},{"location":"api/2.0.4/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/2.0.4/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/2.0.4/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/2.0.6/","text":"API Docs - v2.0.6 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"2.0.6"},{"location":"api/2.0.6/#api-docs-v206","text":"","title":"API Docs - v2.0.6"},{"location":"api/2.0.6/#sink","text":"","title":"Sink"},{"location":"api/2.0.6/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/2.0.6/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/2.0.6/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/2.0.6/#source","text":"","title":"Source"},{"location":"api/2.0.6/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/2.0.6/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/2.0.6/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/2.0.7/","text":"API Docs - v2.0.7 Sink http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No hostname.verification.enabled To enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"2.0.7"},{"location":"api/2.0.7/#api-docs-v207","text":"","title":"API Docs - v2.0.7"},{"location":"api/2.0.7/#sink","text":"","title":"Sink"},{"location":"api/2.0.7/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No hostname.verification.enabled To enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/2.0.7/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/2.0.7/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/2.0.7/#source","text":"","title":"Source"},{"location":"api/2.0.7/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/2.0.7/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/2.0.7/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/2.0.8/","text":"API Docs - v2.0.8 Sink Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions. http (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , connection.pool.count= INT , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay This is mapped to TCP_NODELAY socket option which allows the network to bypass Nagle Delays by disabling Nagle's algorithm, and sending the data as soon as it's available . Setting this parameter to 'true' forces a socket to send the data in its buffer, whatever the packet size. true BOOL Yes No client.bootstrap.keepalive This parameter defines whether the tcp connection should remain open for multiple HTTP requests/responses. If this is set to 'false', HTTP connections will be closed after each request. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No connection.pool.count Number of connection pools that need to be created for the particular client. 0 INT Yes No max.pool.active.connections Maximum possible number of active connection per pool for the client. -1 INT Yes No min.pool.idle.connections Minimum allowed number of idle connections that can be existed in a pool of the client. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can be existed in a pool of the client. 100 INT Yes No min.evictable.idle.time Minimum amount of time (in milliseconds) a connection may sit idle in the pool before it is eligible for eviction. 300000ms STRING Yes No time.between.eviction.runs Time between two eviction operations (in milliseconds) on the connection pool. 30000ms STRING Yes No max.wait.time The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned. 60000 STRING Yes No test.on.borrow The indication of whether objects will be validated before being borrowed from the pool. If the object validation is failed, it will be dropped from the pool, and will attempt to borrow another. true BOOL Yes No test.while.idle The indication of whether objects will be validated by the idle object evictor (if any). If the object validation is failed, it will be dropped from the pool. true BOOL Yes No exhausted.action Action which should be taken when the maximum number of active connections are being used. This action is indicated as an integer. Possible action are as following. 0 - Fail the request when pool is exhausted. 1 - Block the request when pool is exhausted, until a connection returns to the pool. 2 - Grow the connection pool size when it's exhausted. 1 (Block when exhausted) INT Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests NONE STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests NONE STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests NONE STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests NONE STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No hostname.verification.enabled To enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo' http-request (Sink) This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format. http-response (Sink) HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json' Source http (Source) The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-request (Source) The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header. http-response (Source) The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"2.0.8"},{"location":"api/2.0.8/#api-docs-v208","text":"","title":"API Docs - v2.0.8"},{"location":"api/2.0.8/#sink","text":"Tested Siddhi Core version: 5.0.0 It could also support other Siddhi Core minor versions.","title":"Sink"},{"location":"api/2.0.8/#http-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , connection.pool.count= INT , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , token.url= STRING , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url.e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled This parameter is used to disable/enable chunked transfer encoding false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay This is mapped to TCP_NODELAY socket option which allows the network to bypass Nagle Delays by disabling Nagle's algorithm, and sending the data as soon as it's available . Setting this parameter to 'true' forces a socket to send the data in its buffer, whatever the packet size. true BOOL Yes No client.bootstrap.keepalive This parameter defines whether the tcp connection should remain open for multiple HTTP requests/responses. If this is set to 'false', HTTP connections will be closed after each request. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No connection.pool.count Number of connection pools that need to be created for the particular client. 0 INT Yes No max.pool.active.connections Maximum possible number of active connection per pool for the client. -1 INT Yes No min.pool.idle.connections Minimum allowed number of idle connections that can be existed in a pool of the client. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can be existed in a pool of the client. 100 INT Yes No min.evictable.idle.time Minimum amount of time (in milliseconds) a connection may sit idle in the pool before it is eligible for eviction. 300000ms STRING Yes No time.between.eviction.runs Time between two eviction operations (in milliseconds) on the connection pool. 30000ms STRING Yes No max.wait.time The maximum number of milliseconds that the pool will wait (when there are no available connections) for a connection to be returned. 60000 STRING Yes No test.on.borrow The indication of whether objects will be validated before being borrowed from the pool. If the object validation is failed, it will be dropped from the pool, and will attempt to borrow another. true BOOL Yes No test.while.idle The indication of whether objects will be validated by the idle object evictor (if any). If the object validation is failed, it will be dropped from the pool. true BOOL Yes No exhausted.action Action which should be taken when the maximum number of active connections are being used. This action is indicated as an integer. Possible action are as following. 0 - Fail the request when pool is exhausted. 1 - Block the request when pool is exhausted, until a connection returns to the pool. 2 - Grow the connection pool size when it's exhausted. 1 (Block when exhausted) INT Yes No oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests NONE STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests NONE STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests NONE STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests NONE STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No token.url token url for generate a new access token. It is only applicable for for Oauth requests STRING Yes No hostname.verification.enabled To enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer clientBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer clientBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client-truststore.jks trustStorePassword The default truststore password. wso2carbon Truststore password Examples EXAMPLE 1 @sink(type='http',publisher.url='http://localhost:8009/foo', method='{{method}}',headers= 'content-type:xml','content-length:94' , client.bootstrap.configuration= 'client.bootstrap.socket.timeout:20', 'client.bootstrap.worker.group.size:10' , client.pool.configuration= 'client.connection.pool.count:10','client.max.active.connections.per.pool:1' , @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); If it is xml mapping expected input should be in following format for FooStream: { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , POST, Content-Length:24#Content-Location:USA#Retry-After:120 } Above event will generate output as below. ~Output http event payload events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events ~Output http event headers Content-Length:24, Content-Location:'USA', Retry-After:120, Content-Type:'application/xml', HTTP_METHOD:'POST', ~Output http event properties HTTP_METHOD:'POST', HOST:'localhost', PORT:8009, PROTOCOL:'http', TO:'/foo'","title":"http (Sink)"},{"location":"api/2.0.8/#http-request-sink","text":"This extension publish the HTTP events in any HTTP method POST, GET, PUT, DELETE via HTTP or https protocols. As the additional features this component can provide basic authentication as well as user can publish events using custom client truststore files when publishing events via https protocol. And also user can add any number of headers including HTTP_METHOD header for each event dynamically. Following content types will be set by default according to the type of sink mapper used. You can override them by setting the new content types in headers. - TEXT : text/plain - XML : application/xml - JSON : application/json - KEYVALUE : application/x-www-form-urlencoded HTTP request sink is correlated with the The HTTP reponse source, through a unique sink.id .It sends the request to the defined url and the response is received by the response source which has the same 'sink.id'. Syntax @sink(type= http-request , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , client.enable.session.creation= STRING , follow.redirect= BOOL , max.redirect.count= INT , tls.store.type= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configuration= STRING , client.bootstrap.nodelay= BOOL , client.bootstrap.keepalive= BOOL , client.bootstrap.sendbuffersize= INT , client.bootstrap.recievebuffersize= INT , client.bootstrap.connect.timeout= INT , client.bootstrap.socket.reuse= BOOL , client.bootstrap.socket.timeout= STRING , client.threadpool.configurations= STRING , client.connection.pool.count= INT , client.max.active.connections.per.pool= INT , client.min.idle.connections.per.pool= INT , client.max.idle.connections.per.pool= INT , client.min.eviction.idle.time= STRING , sender.thread.count= STRING , event.group.executor.thread.size= STRING , max.wait.for.client.connection.pool= STRING , sink.id= STRING , downloading.enabled= BOOL , download.path= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , refresh.token= STRING , blocking.io= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published via HTTP. This is a mandatory parameter and if this is not specified, an error is logged in the CLI. If user wants to enable SSL for the events, use https instead of http in the publisher.url. e.g., http://localhost:8080/endpoint , https://localhost:8080/endpoint This can be used as a dynamic parameter as well. STRING No Yes basic.auth.username The username to be included in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No basic.auth.password The password to include in the authentication header of the basic authentication enabled events. It is required to specify both username and password to enable basic authentication. If one of the parameter is not given by user then an error is logged in the CLI. STRING Yes No https.truststore.file The file path to the location of the truststore of the client that sends the HTTP events through 'https' protocol. A custom client-truststore can be specified if required. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. A custom password can be specified if required. If no custom password is specified and the protocol of URL is 'https' then, the system uses default password. wso2carbon STRING Yes No headers The headers that should be included as HTTP request headers. There can be any number of headers concatenated in following format. \"'header1:value1','header2:value2'\". User can include Content-Type header if he needs to use a specific content-type for the payload. Or else, system decides the Content-Type by considering the type of sink mapper, in following way. - @map(xml):application/xml - @map(json):application/json - @map(text):plain/text ) - if user does not include any mapping type then the system gets 'plain/text' as default Content-Type header. Note that providing content-length as a header is not supported. The size of the payload will be automatically calculated and included in the content-length header. STRING Yes No method For HTTP events, HTTP_METHOD header should be included as a request header. If the parameter is null then system uses 'POST' as a default header. POST STRING Yes No socket.idle.timeout Socket timeout value in millisecond 6000 INT Yes No chunk.disabled port: Port number of the remote service false BOOL Yes No ssl.protocol The SSL protocol version TLS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No client.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No follow.redirect Redirect related enabled. true BOOL Yes No max.redirect.count Maximum redirect count. 5 INT Yes No tls.store.type TLS store type to be used. JKS STRING Yes No proxy.host Proxy server host null STRING Yes No proxy.port Proxy server port null STRING Yes No proxy.username Proxy server username null STRING Yes No proxy.password Proxy server password null STRING Yes No client.bootstrap.configuration Client bootsrap configurations. Expected format of these parameters is as follows: \"'client.bootstrap.nodelay:xxx','client.bootstrap.keepalive:xxx'\" TODO STRING Yes No client.bootstrap.nodelay Http client no delay. true BOOL Yes No client.bootstrap.keepalive Http client keep alive. true BOOL Yes No client.bootstrap.sendbuffersize Http client send buffer size. 1048576 INT Yes No client.bootstrap.recievebuffersize Http client receive buffer size. 1048576 INT Yes No client.bootstrap.connect.timeout Http client connection timeout. 15000 INT Yes No client.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No client.bootstrap.socket.timeout Http client socket timeout. 15 STRING Yes No client.threadpool.configurations Thread pool configuration. Expected format of these parameters is as follows: \"'client.connection.pool.count:xxx','client.max.active.connections.per.pool:xxx'\" TODO STRING Yes No client.connection.pool.count Connection pool count. 0 INT Yes No client.max.active.connections.per.pool Active connections per pool. -1 INT Yes No client.min.idle.connections.per.pool Minimum ideal connection per pool. 0 INT Yes No client.max.idle.connections.per.pool Maximum ideal connection per pool. 100 INT Yes No client.min.eviction.idle.time Minimum eviction idle time. 5 * 60 * 1000 STRING Yes No sender.thread.count Http sender thread count. 20 STRING Yes No event.group.executor.thread.size Event group executor thread size. 15 STRING Yes No max.wait.for.client.connection.pool Maximum wait for client connection pool. 60000 STRING Yes No sink.id Identifier of the sink. This is used to co-relate with the corresponding http-response source which needs to process the repose for the request sent by this sink. STRING No No downloading.enabled If this is set to 'true' then the response received by the response source will be written to a file. If downloading is enabled, the download.path parameter is mandatory. false BOOL Yes No download.path If downloading is enabled, the path of the file which is going to be downloaded should be specified using 'download.path' parameter. This should be an absolute path including the file name. null STRING Yes Yes oauth.username The username to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No oauth.password The password to be included in the authentication header of the oauth authentication enabled events. It is required to specify both username and password to enable oauth authentication. If one of the parameter is not given by user then an error is logged in the CLI. It is only applicable for for Oauth requests STRING Yes No consumer.key consumer key for the Http request. It is only applicable for for Oauth requests STRING Yes No consumer.secret consumer secret for the Http request. It is only applicable for for Oauth requests STRING Yes No refresh.token refresh token for the Http request. It is only applicable for for Oauth requests STRING Yes No blocking.io If this is set to 'true', after sending a request, http-request sink waits until it receives the response for that request, before sending any other request. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, method string, headers string); @source(type='http-response', sink.id='foo', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='foo', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, the payload body for 'FooStream' will be in following format. { events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events , This message will sent as the body of a POST request with the content-type 'application/xml' to the endpoint defined as the 'publisher.url' and in order to process the responses for these requests, there should be a source of type 'http-response' defined with the same sink id 'foo' in the siddhi app. The responses with 2xx status codes will be received by the http-response source which has the http.status.code defined by the regex '2\\\\d+'. If the response has a 4xx status code, it will be received by the http-response source which has the http.status.code defined by the regex '4\\\\d+'. EXAMPLE 2 define stream FooStream (name String, id int, headers String, downloadPath string); @sink(type='http-request', downloading.enabled='true', download.path='{{downloadPath}}',publisher.url='http://localhost:8005/files', method='GET', headers='{{headers}}',sink.id='download-sink', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response', sink.id='download-sink', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', fileName='A[1]'))) define stream responseStream2xx(fileName string, headers string); @source(type='http-response', sink.id='download-sink', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream responseStream4xx(errorMsg string); In above example, http-request sink will send a GET request to the publisher url and the requested file will be received as the response by a corresponding http-response source. If the http status code of the response is a successful one (2xx), it will be received by the http-response source which has the http.status.code '2\\\\d+' and downloaded as a local file. Then the event received to the responseStream2xx will have the headers included in the request and the downloaded file name. If the http status code of the response is a 4xx code, it will be received by the http-response source which has the http.status.code '4\\\\d+'. Then the event received to the responseStream4xx will have the response message body in text format.","title":"http-request (Sink)"},{"location":"api/2.0.8/#http-response-sink","text":"HTTP response sink is correlated with the The HTTP request source, through a unique source.id , and it send a response to the HTTP request source having the same source.id . The response message can be formatted in text , XML or JSON and can be sent with appropriate headers. Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier of the source. STRING No No message.id Identifier of the message. STRING No Yes headers The headers that should be included as HTTP response headers. There can be any number of headers concatenated on following format. \"'header1:value1','header2:value2'\" User can include content-type header if he/she need to have any specific type for payload. If not system get the mapping type as the content-Type header (ie. @map(xml) : application/xml , @map(json) : application/json , @map(text) : plain/text ) and if user does not include any mapping type then system gets the plain/text as default Content-Type header. If user does not include Content-Length header then system calculate the bytes size of payload and include it as content-length header. STRING Yes No Examples EXAMPLE 1 @sink(type='http-response', source.id='sampleSourceId', message.id='{{messageId}}', headers= 'content-type:json','content-length:94' @map(type='json', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody String, messageId string, headers string); If it is json mapping expected input should be in following format for FooStream: { {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } }, 0cf708b1-7eae-440b-a93e-e72f801b486a, Content-Length:24#Content-Location:USA } Above event will generate response for the matching source message as below. ~Output http event payload {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } ~Output http event headers Content-Length:24, Content-Location:'USA', Content-Type:'application/json'","title":"http-response (Sink)"},{"location":"api/2.0.8/#source","text":"","title":"Source"},{"location":"api/2.0.8/#http-source","text":"The HTTP source receives POST requests via HTTP or HTTPS in format such as text , XML and JSON . In WSO2 SP, if required, you can enable basic authentication to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No basic.auth.enabled This works only in WSO2 SP. If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password Examples EXAMPLE 1 @source(type='http', receiver.url='http://localhost:9055/endpoints/RecPro', socketIdleTimeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' ,request.size.validation.configuration= request.size.validation:true ,server.bootstrap.configuration= server.bootstrap.socket.timeout:25 @map(type='xml')) define stream FooStream (symbol string, price float, volume long); Above source listenerConfiguration performs a default XML input mapping. The expected input is as follows: events event symbol WSO2 /symbol price 55.6 /price volume 100 /volume /event /events If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http (Source)"},{"location":"api/2.0.8/#http-request-source","text":"The HTTP request is correlated with the HTTP response sink, through a unique source.id , and for each POST requests it receives via HTTP or HTTPS in format such as text , XML and JSON it sends the response via the HTTP response sink. The individual request and response messages are correlated at the sink using the message.id of the events. If required, you can enable basic authentication at the source to ensure that events are received only from users who are authorized to access the service. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , parameters= STRING , ciphers= STRING , ssl.enabled.protocols= STRING , server.enable.session.creation= STRING , server.supported.snimatchers= STRING , server.suported.server.names= STRING , request.size.validation.configuration= STRING , request.size.validation= STRING , request.size.validation.maximum.value= STRING , request.size.validation.reject.status.code= STRING , request.size.validation.reject.message= STRING , request.size.validation.reject.message.content.type= STRING , header.size.validation= STRING , header.validation.maximum.request.line= STRING , header.validation.maximum.size= STRING , header.validation.maximum.chunk.size= STRING , header.validation.reject.status.code= STRING , header.validation.reject.message= STRING , header.validation.reject.message.content.type= STRING , server.bootstrap.configuration= OBJECT , server.bootstrap.nodelay= BOOL , server.bootstrap.keepalive= BOOL , server.bootstrap.sendbuffersize= INT , server.bootstrap.recievebuffersize= INT , server.bootstrap.connect.timeout= INT , server.bootstrap.socket.reuse= BOOL , server.bootstrap.socket.timeout= BOOL , server.bootstrap.socket.backlog= BOOL , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL to which the events should be received. User can provide any valid url and if the url is not provided the system will use the following format http://0.0.0.0:9763/ appNAme / streamName If the user want to use SSL the url should be given in following format https://localhost:8080/ streamName http://0.0.0.0:9763/ / STRING Yes No source.id Identifier need to map the source to sink. STRING No No connection.timeout Connection timeout in milliseconds. If the mapped http-response sink does not get a correlated message, after this timeout value, a timeout response is sent 120000 INT Yes No basic.auth.enabled If this is set to true , basic authentication is enabled for incoming events, and the credentials with which each event is sent are verified to ensure that the user is authorized to access the service. If basic authentication fails, the event is not authenticated and an authentication error is logged in the CLI. By default this values 'false' false STRING Yes No worker.count The number of active worker threads to serve the incoming events. The value is 1 by default. This will ensure that the events are directed to the event stream in the same order in which they arrive. By increasing this value the performance might increase at the cost of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection. 120000 INT Yes No ssl.verify.client The type of client certificate verification. null STRING Yes No ssl.protocol ssl/tls related options TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No parameters Parameters other than basics such as ciphers,sslEnabledProtocols,client.enable.session.creation. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null STRING Yes No ciphers List of ciphers to be used. This parameter should include under parameters Ex: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' null STRING Yes No ssl.enabled.protocols SSL/TLS protocols to be enabled. This parameter should be in camel case format(sslEnabledProtocols) under parameters. Ex 'sslEnabledProtocols:true' null STRING Yes No server.enable.session.creation Enable HTTP session creation.This parameter should include under parameters Ex: 'client.enable.session.creation:true' null STRING Yes No server.supported.snimatchers Http SNIMatcher to be added. This parameter should include under parameters Ex: 'server.supported.snimatchers:SNIMatcher' null STRING Yes No server.suported.server.names Http supported servers. This parameter should include under parameters Ex: 'server.suported.server.names:server' null STRING Yes No request.size.validation.configuration Parameters that responsible for validating the http request and request headers. Expected format of these parameters is as follows: \"'request.size.validation:xxx','request.size.validation.maximum.value:xxx'\" null STRING Yes No request.size.validation To enable the request size validation. false STRING Yes No request.size.validation.maximum.value If request size is validated then maximum size. Integer.MAX_VALUE STRING Yes No request.size.validation.reject.status.code If request is exceed maximum size and request.size.validation is enabled then status code to be send as response. 401 STRING Yes No request.size.validation.reject.message If request is exceed maximum size and request.size.validation is enabled then status message to be send as response. Message is bigger than the valid size STRING Yes No request.size.validation.reject.message.content.type If request is exceed maximum size and request.size.validation is enabled then content type to be send as response. plain/text STRING Yes No header.size.validation To enable the header size validation. false STRING Yes No header.validation.maximum.request.line If header header validation is enabled then the maximum request line. 4096 STRING Yes No header.validation.maximum.size If header header validation is enabled then the maximum expected header size. 8192 STRING Yes No header.validation.maximum.chunk.size If header header validation is enabled then the maximum expected chunk size. 8192 STRING Yes No header.validation.reject.status.code 401 If header is exceed maximum size and header.size.validation is enabled then status code to be send as response. STRING Yes No header.validation.reject.message If header is exceed maximum size and header.size.validation is enabled then message to be send as response. Message header is bigger than the valid size STRING Yes No header.validation.reject.message.content.type If header is exceed maximum size and header.size.validation is enabled then content type to be send as response. plain/text STRING Yes No server.bootstrap.configuration Parameters that for bootstrap configurations of the server. Expected format of these parameters is as follows: \"'ciphers:xxx','sslEnabledProtocols,client.enable:xxx'\" null OBJECT Yes No server.bootstrap.nodelay Http server no delay. true BOOL Yes No server.bootstrap.keepalive Http server keep alive. true BOOL Yes No server.bootstrap.sendbuffersize Http server send buffer size. 1048576 INT Yes No server.bootstrap.recievebuffersize Http server receive buffer size. 1048576 INT Yes No server.bootstrap.connect.timeout Http server connection timeout. 15000 INT Yes No server.bootstrap.socket.reuse To enable http socket reuse. false BOOL Yes No server.bootstrap.socket.timeout Http server socket timeout. 15 BOOL Yes No server.bootstrap.socket.backlog THttp server socket backlog. 100 BOOL Yes No trace.log.enabled Http traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize property to configure number of boss threads, which accepts incoming connections until the ports are unbound. Once connection accepts successfully, boss thread passes the accepted channel to one of the worker threads. Number of available processors Any integer serverBootstrapWorkerGroupSize property to configure number of worker threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer serverBootstrapClientGroupSize property to configure number of client threads, which performs non blocking read and write for one or more channels in non-blocking mode. (Number of available processors) 2 Any integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultHttpPort The default port if the default scheme is 'http'. 8280 Any valid port defaultHttpsPort The default port if the default scheme is 'https'. 8243 Any valid port defaultScheme The default protocol. http http https keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to wso2carbon.jks file keyStorePassword The default keystore password. wso2carbon String of keystore password certPassword The default cert password. wso2carbon String of cert password Examples EXAMPLE 1 @source(type='http-request', source.id='sampleSourceId, receiver.url='http://localhost:9055/endpoints/RecPro', connection.timeout='150000', parameters= 'ciphers : TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', 'sslEnabledProtocols:TLSv1.1,TLSv1.2' , request.size.validation.configuration= request.size.validation:true , server.bootstrap.configuration= server.bootstrap.socket.timeout:25 , @map(type='json, @attributes(messageId='trp:messageId', symbol='$.events.event.symbol', price='$.events.event.price', volume='$.events.event.volume'))) define stream FooStream (messageId string, symbol string, price float, volume long); The expected input is as follows: {\"events\": {\"event\": \"symbol\":WSO2, \"price\":55.6, \"volume\":100, } } If basic authentication is enabled via the basic.auth.enabled='true setting, each input event is also expected to contain the Authorization:'Basic encodeBase64(username:Password)' header.","title":"http-request (Source)"},{"location":"api/2.0.8/#http-response-source","text":"The http-response source co-relates with http-request sink with the parameter 'sink.id'. This receives responses for the requests sent by the http-request sink which has the same sink id. Response messages can be in formats such as TEXT, JSON and XML. In order to handle the responses with different http status codes, user is allowed to defined the acceptable response source code using the parameter 'http.status.code' Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id This parameter is used to map the http-response source to a http-request sink. Then this source will accepts the response messages for the requests sent by corresponding http-request sink. STRING No No http.status.code Acceptable http status code for the responses. This can be a complete string or a regex. Only the responses with matching status codes to the defined value, will be received by the http-response source. Eg: 'http.status.code = '200', http.status.code = '2\\d+'' 200 STRING Yes No allow.streaming.responses If responses can be received multiple times for a single request, this option should be enabled. If this is not enabled, for every request, response will be extracted only once. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', downloading.enabled='true', publisher.url='http://localhost:8005/registry/employee', method='POST', headers='{{headers}}',sink.id='employee-info', @map(type='json')) define stream BarStream (name String, id int, headers String, downloadPath string); @source(type='http-response' , sink.id='employee-info', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream2xx(message string);@source(type='http-response' , sink.id='employee-info', http.status.code='4\\\\d+' , @map(type='text', regex.A='((.|\\n)*)', @attributes(message='A[1]'))) define stream responseStream4xx(message string); In above example, the defined http-request sink will send a POST requests to the endpoint defined by 'publisher.url'. Then for those requests, the source with the response code '2\\\\d+' and sink.id 'employee-info' will receive the responses with 2xx status codes. The http-response source which has 'employee-info' as the 'sink.id' and '4\\\\d+' as the http.response.code will receive all the responses with 4xx status codes. . Then the body of the response message will be extracted using text mapper and converted into siddhi events. .","title":"http-response (Source)"},{"location":"api/2.1.0/","text":"API Docs - v2.1.0 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties are exposed via transport properties and they can be retrieved in the mapper in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It also allows accessing the attributes of the event that initiated the call via transport properties and map them with the format trp: attribute name '.The response headers and properties are exposed via transport properties and they can be retrieved in the mapper in the format trp: header . Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It also allows accessing the attributes of the event that initiated the call via transport properties and map them with the format trp: attribute name '. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties are exposed via transport properties and they can be retrieved in the mapper in the format trp: header . Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"2.1.0"},{"location":"api/2.1.0/#api-docs-v210","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.1.0"},{"location":"api/2.1.0/#sink","text":"","title":"Sink"},{"location":"api/2.1.0/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.1.0/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.1.0/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.1.0/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.1.0/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.1.0/#source","text":"","title":"Source"},{"location":"api/2.1.0/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties are exposed via transport properties and they can be retrieved in the mapper in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.1.0/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It also allows accessing the attributes of the event that initiated the call via transport properties and map them with the format trp: attribute name '.The response headers and properties are exposed via transport properties and they can be retrieved in the mapper in the format trp: header . Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.1.0/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.1.0/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It also allows accessing the attributes of the event that initiated the call via transport properties and map them with the format trp: attribute name '. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.1.0/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties are exposed via transport properties and they can be retrieved in the mapper in the format trp: header . Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.1.1/","text":"API Docs - v2.1.1 Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , blocking.io= BOOL , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No blocking.io Blocks the request thread until a response it received from HTTP endpoint. This should be enabled for reliable messaging (error handling) false BOOL Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"2.1.1"},{"location":"api/2.1.1/#api-docs-v211","text":"Tested Siddhi Core version: 5.1.2 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.1.1"},{"location":"api/2.1.1/#sink","text":"","title":"Sink"},{"location":"api/2.1.1/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , blocking.io= BOOL , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No blocking.io Blocks the request thread until a response it received from HTTP endpoint. This should be enabled for reliable messaging (error handling) false BOOL Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.1.1/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.1.1/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.1.1/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.1.1/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.1.1/#source","text":"","title":"Source"},{"location":"api/2.1.1/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.1.1/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.1.1/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.1.1/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.1.1/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.1.2/","text":"API Docs - v2.1.2 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"2.1.2"},{"location":"api/2.1.2/#api-docs-v212","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.1.2"},{"location":"api/2.1.2/#sink","text":"","title":"Sink"},{"location":"api/2.1.2/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.1.2/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.1.2/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.1.2/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.1.2/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.1.2/#source","text":"","title":"Source"},{"location":"api/2.1.2/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.1.2/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.1.2/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.1.2/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.1.2/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.2.0/","text":"API Docs - v2.2.0 Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"2.2.0"},{"location":"api/2.2.0/#api-docs-v220","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.2.0"},{"location":"api/2.2.0/#sink","text":"","title":"Sink"},{"location":"api/2.2.0/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.2.0/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.2.0/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.2.0/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.2.0/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.2.0/#source","text":"","title":"Source"},{"location":"api/2.2.0/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.2.0/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.2.0/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.2.0/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.2.0/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.2.1/","text":"API Docs - v2.2.1 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"2.2.1"},{"location":"api/2.2.1/#api-docs-v221","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.2.1"},{"location":"api/2.2.1/#sink","text":"","title":"Sink"},{"location":"api/2.2.1/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.2.1/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.2.1/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.2.1/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.2.1/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.2.1/#source","text":"","title":"Source"},{"location":"api/2.2.1/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.2.1/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.2.1/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.2.1/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.2.1/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.2.2/","text":"API Docs - v2.2.2 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"2.2.2"},{"location":"api/2.2.2/#api-docs-v222","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.2.2"},{"location":"api/2.2.2/#sink","text":"","title":"Sink"},{"location":"api/2.2.2/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.2.2/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.2.2/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.2.2/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.2.2/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.2.2/#source","text":"","title":"Source"},{"location":"api/2.2.2/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.2.2/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.2.2/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.2.2/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.2.2/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.2.3/","text":"API Docs - v2.2.3 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"2.2.3"},{"location":"api/2.2.3/#api-docs-v223","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.2.3"},{"location":"api/2.2.3/#sink","text":"","title":"Sink"},{"location":"api/2.2.3/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.2.3/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.2.3/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.2.3/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.2.3/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.2.3/#source","text":"","title":"Source"},{"location":"api/2.2.3/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.2.3/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.2.3/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.2.3/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.2.3/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.2.4/","text":"API Docs - v2.2.4 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"2.2.4"},{"location":"api/2.2.4/#api-docs-v224","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.2.4"},{"location":"api/2.2.4/#sink","text":"","title":"Sink"},{"location":"api/2.2.4/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.2.4/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.2.4/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.2.4/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.2.4/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.2.4/#source","text":"","title":"Source"},{"location":"api/2.2.4/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.2.4/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.2.4/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.2.4/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.2.4/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.3.0/","text":"API Docs - v2.3.0 Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } } sse (Source) HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , event.source.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.source.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url","title":"2.3.0"},{"location":"api/2.3.0/#api-docs-v230","text":"Tested Siddhi Core version: 5.1.13 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.3.0"},{"location":"api/2.3.0/#sink","text":"","title":"Sink"},{"location":"api/2.3.0/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.3.0/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.3.0/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.3.0/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.3.0/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.3.0/#source","text":"","title":"Source"},{"location":"api/2.3.0/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.3.0/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.3.0/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.3.0/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.3.0/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.3.0/#sse-source","text":"HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , event.source.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.source.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url","title":"sse (Source)"},{"location":"api/2.3.1/","text":"API Docs - v2.3.1 Tested Siddhi Core version: 5.1.19 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. sse (Sink) HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse , event.sink.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.sink.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url websubhubeventpublisher (Sink) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id and Syntax @sink(type= websubhubeventpublisher , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } } sse (Source) HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , event.source.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.source.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url websubhub (Source) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"2.3.1"},{"location":"api/2.3.1/#api-docs-v231","text":"Tested Siddhi Core version: 5.1.19 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.3.1"},{"location":"api/2.3.1/#sink","text":"","title":"Sink"},{"location":"api/2.3.1/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.3.1/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.3.1/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.3.1/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.3.1/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.3.1/#sse-sink","text":"HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse , event.sink.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.sink.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url","title":"sse (Sink)"},{"location":"api/2.3.1/#websubhubeventpublisher-sink","text":"WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id and Syntax @sink(type= websubhubeventpublisher , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe.","title":"websubhubeventpublisher (Sink)"},{"location":"api/2.3.1/#source","text":"","title":"Source"},{"location":"api/2.3.1/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.3.1/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.3.1/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.3.1/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.3.1/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.3.1/#sse-source","text":"HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , event.source.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.source.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url","title":"sse (Source)"},{"location":"api/2.3.1/#websubhub-source","text":"WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"websubhub (Source)"},{"location":"api/2.3.2/","text":"API Docs - v2.3.2 Tested Siddhi Core version: 5.1.19 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. sse (Sink) HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse , event.sink.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.sink.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url websubhub (Sink) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id and Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } } sse (Source) HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , event.source.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.source.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url websubhub (Source) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"2.3.2"},{"location":"api/2.3.2/#api-docs-v232","text":"Tested Siddhi Core version: 5.1.19 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.3.2"},{"location":"api/2.3.2/#sink","text":"","title":"Sink"},{"location":"api/2.3.2/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.3.2/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.3.2/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.3.2/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.3.2/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.3.2/#sse-sink","text":"HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse , event.sink.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.sink.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url","title":"sse (Sink)"},{"location":"api/2.3.2/#websubhub-sink","text":"WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id and Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe.","title":"websubhub (Sink)"},{"location":"api/2.3.2/#source","text":"","title":"Source"},{"location":"api/2.3.2/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.3.2/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.3.2/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.3.2/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.3.2/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.3.2/#sse-source","text":"HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , event.source.url= STRING , method= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic event.source.url The sse endpoint url which should be listened. STRING No No method The HTTP method used for calling the endpoint. GET STRING Yes No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', event.source.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at event.source.url","title":"sse (Source)"},{"location":"api/2.3.2/#websubhub-source","text":"WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"websubhub (Source)"},{"location":"api/2.3.3/","text":"API Docs - v2.3.3 Tested Siddhi Core version: 5.1.19 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. sse-server (Sink) HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url websubhub (Sink) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id and Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } } sse (Source) HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url websubhub (Source) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"2.3.3"},{"location":"api/2.3.3/#api-docs-v233","text":"Tested Siddhi Core version: 5.1.19 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.3.3"},{"location":"api/2.3.3/#sink","text":"","title":"Sink"},{"location":"api/2.3.3/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.3.3/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.3.3/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.3.3/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.3.3/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.3.3/#sse-server-sink","text":"HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url","title":"sse-server (Sink)"},{"location":"api/2.3.3/#websubhub-sink","text":"WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id and Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe.","title":"websubhub (Sink)"},{"location":"api/2.3.3/#source","text":"","title":"Source"},{"location":"api/2.3.3/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.3.3/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.3.3/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.3.3/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.3.3/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.3.3/#sse-source","text":"HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url","title":"sse (Source)"},{"location":"api/2.3.3/#websubhub-source","text":"WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"websubhub (Source)"},{"location":"api/2.3.4/","text":"API Docs - v2.3.4 Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. sse-server (Sink) HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url websubhub (Sink) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } } sse (Source) HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url websubhub (Source) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"2.3.4"},{"location":"api/2.3.4/#api-docs-v234","text":"Tested Siddhi Core version: 5.1.21 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.3.4"},{"location":"api/2.3.4/#sink","text":"","title":"Sink"},{"location":"api/2.3.4/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.3.4/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.3.4/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.3.4/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.3.4/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.3.4/#sse-server-sink","text":"HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url","title":"sse-server (Sink)"},{"location":"api/2.3.4/#websubhub-sink","text":"WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe.","title":"websubhub (Sink)"},{"location":"api/2.3.4/#source","text":"","title":"Source"},{"location":"api/2.3.4/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.3.4/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.3.4/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.3.4/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.3.4/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.3.4/#sse-source","text":"HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url","title":"sse (Source)"},{"location":"api/2.3.4/#websubhub-source","text":"WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"websubhub (Source)"},{"location":"api/2.3.5/","text":"API Docs - v2.3.5 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. sse-server (Sink) HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url websubhub (Sink) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } } sse (Source) HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url websubhub (Source) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"2.3.5"},{"location":"api/2.3.5/#api-docs-v235","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.3.5"},{"location":"api/2.3.5/#sink","text":"","title":"Sink"},{"location":"api/2.3.5/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.3.5/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.3.5/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.3.5/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.3.5/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.3.5/#sse-server-sink","text":"HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url","title":"sse-server (Sink)"},{"location":"api/2.3.5/#websubhub-sink","text":"WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe.","title":"websubhub (Sink)"},{"location":"api/2.3.5/#source","text":"","title":"Source"},{"location":"api/2.3.5/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.3.5/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.3.5/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.3.5/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.3.5/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.3.5/#sse-source","text":"HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url","title":"sse (Source)"},{"location":"api/2.3.5/#websubhub-source","text":"WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"websubhub (Source)"},{"location":"api/2.3.6/","text":"API Docs - v2.3.6 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. sse-server (Sink) HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url websubhub (Sink) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } } sse (Source) HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url websubhub (Source) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"2.3.6"},{"location":"api/2.3.6/#api-docs-v236","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.3.6"},{"location":"api/2.3.6/#sink","text":"","title":"Sink"},{"location":"api/2.3.6/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.3.6/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.3.6/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.3.6/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.3.6/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.3.6/#sse-server-sink","text":"HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url","title":"sse-server (Sink)"},{"location":"api/2.3.6/#websubhub-sink","text":"WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe.","title":"websubhub (Sink)"},{"location":"api/2.3.6/#source","text":"","title":"Source"},{"location":"api/2.3.6/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.3.6/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.3.6/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.3.6/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.3.6/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.3.6/#sse-source","text":"HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url","title":"sse (Source)"},{"location":"api/2.3.6/#websubhub-source","text":"WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"websubhub (Source)"},{"location":"api/2.3.7/","text":"API Docs - v2.3.7 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , https.keystore.file= STRING , https.keystore.password= STRING , https.keystore.key.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No https.keystore.file The file path of the keystore when sending messages through https protocol. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No https.keystore.password The password for the keystore. wso2carbon STRING Yes No https.keystore.key.password The password for the keys in the path of the keystore when sending messages through https protocol. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to client keystore .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string keyPassword The default keystore key password. wso2carbon Keystore key password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. sse-server (Sink) HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url websubhub (Sink) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } } sse (Source) HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url websubhub (Source) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"2.3.7"},{"location":"api/2.3.7/#api-docs-v237","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.3.7"},{"location":"api/2.3.7/#sink","text":"","title":"Sink"},{"location":"api/2.3.7/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , https.keystore.file= STRING , https.keystore.password= STRING , https.keystore.key.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No https.keystore.file The file path of the keystore when sending messages through https protocol. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No https.keystore.password The password for the keystore. wso2carbon STRING Yes No https.keystore.key.password The password for the keys in the path of the keystore when sending messages through https protocol. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to client keystore .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string keyPassword The default keystore key password. wso2carbon Keystore key password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/2.3.7/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/2.3.7/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/2.3.7/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/2.3.7/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/2.3.7/#sse-server-sink","text":"HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url","title":"sse-server (Sink)"},{"location":"api/2.3.7/#websubhub-sink","text":"WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe.","title":"websubhub (Sink)"},{"location":"api/2.3.7/#source","text":"","title":"Source"},{"location":"api/2.3.7/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/2.3.7/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/2.3.7/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/2.3.7/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/2.3.7/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/2.3.7/#sse-source","text":"HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url","title":"sse (Source)"},{"location":"api/2.3.7/#websubhub-source","text":"WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"websubhub (Source)"},{"location":"api/latest/","text":"API Docs - v2.3.7 Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions. Sink http (Sink) HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , https.keystore.file= STRING , https.keystore.password= STRING , https.keystore.key.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No https.keystore.file The file path of the keystore when sending messages through https protocol. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No https.keystore.password The password for the keystore. wso2carbon STRING Yes No https.keystore.key.password The password for the keys in the path of the keystore when sending messages through https protocol. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to client keystore .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string keyPassword The default keystore key password. wso2carbon Keystore key password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST' http-call (Sink) The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-request (Sink) Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event. http-response (Sink) Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink. http-service-response (Sink) The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink. sse-server (Sink) HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url websubhub (Sink) WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe. Source http (Source) HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing. http-call-response (Source) The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-request (Source) Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } } http-response (Source) Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event. http-service (Source) The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } } sse (Source) HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url websubhub (Source) WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"latest"},{"location":"api/latest/#api-docs-v237","text":"Tested Siddhi Core version: 5.1.23 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.3.7"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#http-sink","text":"HTTP sink publishes messages via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML and JSON . It can also publish to endpoints protected by basic authentication or OAuth 2.0. Syntax @sink(type= http , publisher.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , https.keystore.file= STRING , https.keystore.password= STRING , https.keystore.key.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , body.consumer.key= STRING , body.consumer.secret= STRING , token.url= STRING , refresh.token= STRING , oauth.scope= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL to which the outgoing events should be published. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No https.keystore.file The file path of the keystore when sending messages through https protocol. ${carbon.home}/resources/security/wso2carbon.jks STRING Yes No https.keystore.password The password for the keystore. wso2carbon STRING Yes No https.keystore.key.password The password for the keys in the path of the keystore when sending messages through https protocol. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No body.consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 if it's required to be sent in token request body - STRING Yes No body.consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No oauth.scope Standard OAuth 2.0 scope parameter default STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to client keystore .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string keyPassword The default keystore key password. wso2carbon Keystore key password as string Examples EXAMPLE 1 @sink(type = 'http', publisher.url = 'http://stocks.com/stocks', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Events arriving on the StockStream will be published to the HTTP endpoint http://stocks.com/stocks using POST method with Content-Type application/json by converting those events to the default JSON format as following: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } EXAMPLE 2 @sink(type='http', publisher.url = 'http://localhost:8009/foo', client.bootstrap.configurations = 'client.bootstrap.socket.timeout:20' , max.pool.active.connections = '1', headers = {{headers}} , @map(type='xml', @payload( stock {{payloadBody}} /stock ))) define stream FooStream (payloadBody String, headers string); Events arriving on FooStream will be published to the HTTP endpoint http://localhost:8009/foo using POST method with Content-Type application/xml and setting payloadBody and header attribute values. If the payloadBody contains symbol WSO2 /symbol price 55.6 /price volume 100 /volume and header contains 'topic:foobar' values, then the system will generate an output with the body: stock symbol WSO2 /symbol price 55.6 /price volume 100 /volume /stock and HTTP headers: Content-Length:xxx , Content-Location:'xxx' , Content-Type:'application/xml' , HTTP_METHOD:'POST'","title":"http (Sink)"},{"location":"api/latest/#http-call-sink","text":"The http-call sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-call-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-call , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-call sink to its corresponding http-call-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-call-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations. Expected format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-call', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-call-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-call sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-call sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-call-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-call', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-call-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-call-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-call sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-call-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-call-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-call (Sink)"},{"location":"api/latest/#http-request-sink","text":"Deprecated (Use http-call sink instead). The http-request sink publishes messages to endpoints via HTTP or HTTPS protocols using methods such as POST, GET, PUT, and DELETE on formats text , XML or JSON and consume responses through its corresponding http-response source. It also supports calling endpoints protected with basic authentication or OAuth 2.0. Syntax @sink(type= http-request , publisher.url= STRING , sink.id= STRING , basic.auth.username= STRING , basic.auth.password= STRING , https.truststore.file= STRING , https.truststore.password= STRING , oauth.username= STRING , oauth.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , downloading.enabled= BOOL , download.path= STRING , blocking.io= BOOL , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic publisher.url The URL which should be called. Examples: http://localhost:8080/endpoint , https://localhost:8080/endpoint STRING No No sink.id Identifier to correlate the http-request sink to its corresponding http-response sources to retrieved the responses. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No oauth.username The username to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.password property should be also set when using this property. - STRING Yes No oauth.password The password to be included in the authentication header when calling endpoints protected by OAuth 2.0. oauth.username property should be also set when using this property. - STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No downloading.enabled Enable response received by the http-response source to be written to a file. When this is enabled the download.path property should be also set. false BOOL Yes No download.path The absolute file path along with the file name where the downloads should be saved. - STRING Yes Yes blocking.io Blocks the request thread until a response it received from HTTP call-response source before sending any other request. false BOOL Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @sink(type='http-request', sink.id='foo', publisher.url='http://localhost:8009/foo', @map(type='xml', @payload('{{payloadBody}}'))) define stream FooStream (payloadBody string); @source(type='http-response', sink.id='foo', @map(type='text', regex.A='((.|\\n)*)', @attributes(headers='trp:headers', message='A[1]'))) define stream ResponseStream(message string, headers string); When events arrive in FooStream , http-request sink makes calls to endpoint on url http://localhost:8009/foo with POST method and Content-Type application/xml . If the event payloadBody attribute contains following XML: item name apple /name price 55 /price quantity 5 /quantity /item the http-request sink maps that and sends it to the endpoint. When endpoint sends a response it will be consumed by the corresponding http-response source correlated via the same sink.id foo and that will map the response message and send it via ResponseStream steam by assigning the message body as message attribute and response headers as headers attribute of the event. EXAMPLE 2 @sink(type='http-request', publisher.url='http://localhost:8005/files/{{name}}' downloading.enabled='true', download.path='{{downloadPath}}{{name}}', method='GET', sink.id='download', @map(type='json')) define stream DownloadRequestStream(name String, id int, downloadPath string); @source(type='http-response', sink.id='download', http.status.code='2\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(name='trp:name', id='trp:id', file='A[1]'))) define stream ResponseStream2xx(name string, id string, file string); @source(type='http-response', sink.id='download', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(errorMsg='A[1]'))) define stream ResponseStream4xx(errorMsg string); When events arrive in DownloadRequestStream with name : foo.txt , id : 75 and downloadPath : /user/download/ the http-request sink sends a GET request to the url http://localhost:8005/files/foo.txt to download the file to the given path /user/download/foo.txt and capture the response via its corresponding http-response source based on the response status code. If the response status code is in the range of 200 the message will be received by the http-response source associated with the ResponseStream2xx stream which expects http.status.code with regex 2\\\\d+ while downloading the file to the local file system on the path /user/download/foo.txt and mapping the response message having the absolute file path to event's file attribute. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the ResponseStream4xx stream which expects http.status.code with regex 4\\\\d+ while mapping the error response to the errorMsg attribute of the event.","title":"http-request (Sink)"},{"location":"api/latest/#http-response-sink","text":"Deprecated (Use http-service-response sink instead). The http-response sink send responses of the requests consumed by its corresponding http-request source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-response sink to its corresponding http-request source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-request source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-request source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-request to the respective http-response sink.","title":"http-response (Sink)"},{"location":"api/latest/#http-service-response-sink","text":"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text , XML and JSON . Syntax @sink(type= http-service-response , source.id= STRING , message.id= STRING , headers= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic source.id Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request. STRING No No message.id Identifier to correlate the response with the request received by http-service source. STRING No Yes headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; The http-service source on stream AddStream listens on url http://localhost:5005/stocks for JSON messages with format: { \"event\": { \"value1\": 3, \"value2\": 4 } } and when events arrive it maps to AddStream events and pass them to query query1 for processing. The query results produced on ResultStream are sent as a response via http-service-response sink with format: { \"event\": { \"results\": 7 } } Here the request and response are correlated by passing the messageId produced by the http-service to the respective http-service-response sink.","title":"http-service-response (Sink)"},{"location":"api/latest/#sse-server-sink","text":"HTTP SSE sink sends events to all subscribers. Syntax @sink(type= sse-server , server.url= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic server.url The listening URL of the SSE server which clients need to connect to receive events. If not provided url will be constructed using siddhi app name and stream name as the context by default with port 8280. eg :- http://0.0.0.0:8280/{app_name}/{stream_name} STRING No No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse-server', server.url='http://localhost:8080/sse', @map(type='json')) define stream PublishingStream (param1 string); External clients can listen to the server.url","title":"sse-server (Sink)"},{"location":"api/latest/#websubhub-sink","text":"WebSubHubEventPublisher publishes messages via HTTP/HTTP according to the provided URL when subscribe to the WebSub hub. The table.name, hub.id are mandatory when defining the websubhub source Syntax @sink(type= websubhub , hub.id= STRING , table.name= STRING , https.truststore.file= STRING , https.truststore.password= STRING , consumer.key= STRING , consumer.secret= STRING , token.url= STRING , refresh.token= STRING , headers= STRING , method= STRING , socket.idle.timeout= INT , chunk.disabled= BOOL , ssl.protocol= STRING , ssl.verification.disabled= BOOL , tls.store.type= STRING , ssl.configurations= STRING , proxy.host= STRING , proxy.port= STRING , proxy.username= STRING , proxy.password= STRING , client.bootstrap.configurations= STRING , max.pool.active.connections= INT , min.pool.idle.connections= INT , max.pool.idle.connections= INT , executor.service.threads= INT , min.evictable.idle.time= STRING , time.between.eviction.runs= STRING , max.wait.time= STRING , test.on.borrow= BOOL , test.while.idle= BOOL , exhausted.action= INT , hostname.verification.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Id of the hub that the messages needed to process STRING No No table.name Name of the table which subscription data holds related to the hub STRING No No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No consumer.key Consumer key used for calling endpoints protected by OAuth 2.0 - STRING Yes No consumer.secret Consumer secret used for calling endpoints protected by OAuth 2.0 - STRING Yes No token.url Token URL to generate a new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No refresh.token Refresh token used for generating new access tokens when calling endpoints protected by OAuth 2.0 - STRING Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When Content-Type header is not provided the system derives the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No method The HTTP method used for calling the endpoint. POST STRING Yes No socket.idle.timeout Socket timeout in millis. 6000 INT Yes No chunk.disabled Disable chunked transfer encoding. false BOOL Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No ssl.verification.disabled Disable SSL verification. false BOOL Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No proxy.host Proxy server host - STRING Yes No proxy.port Proxy server port - STRING Yes No proxy.username Proxy server username - STRING Yes No proxy.password Proxy server password - STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No max.pool.active.connections Maximum possible number of active connection per client pool. -1 INT Yes No min.pool.idle.connections Minimum number of idle connections that can exist per client pool. 0 INT Yes No max.pool.idle.connections Maximum number of idle connections that can exist per client pool. 100 INT Yes No executor.service.threads Thread count for the executor service. 20 INT Yes No min.evictable.idle.time Minimum time (in millis) a connection may sit idle in the client pool before it become eligible for eviction. 300000 STRING Yes No time.between.eviction.runs Time between two eviction operations (in millis) on the client pool. 30000 STRING Yes No max.wait.time The maximum time (in millis) the pool will wait (when there are no available connections) for a connection to be returned to the pool. 60000 STRING Yes No test.on.borrow Enable connections to be validated before being borrowed from the client pool. true BOOL Yes No test.while.idle Enable connections to be validated during the eviction operation (if any). true BOOL Yes No exhausted.action Action that should be taken when the maximum number of active connections are being used. This action should be indicated as an int and possible action values are following. 0 - Fail the request. 1 - Block the request, until a connection returns to the pool. 2 - Grow the connection pool size. 1 (Block when exhausted) INT Yes No hostname.verification.enabled Enable hostname verification. true BOOL Yes No System Parameters Name Description Default Value Possible Parameters clientBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer clientBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer clientBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer trustStoreLocation The default truststore file path. ${carbon.home}/resources/security/client-truststore.jks Path to client truststore .jks file trustStorePassword The default truststore password. wso2carbon Truststore password as string Examples EXAMPLE 1 @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @sink(type='websubhubeventpublisher', hub.id= anu_123 , table.name='SessionTable',publisher.url= mysql://localhost:3306/production?useSSL=false , @map(type='keyvalue',implicit.cast.enable='true')) define stream LowProductionAlertStream (topic string, payload string); Subscribed users will received the messages generated through the hub and will publish to the callback url when subscribe.","title":"websubhub (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#http-source","text":"HTTP source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON . It also supports basic authentication to ensure events are received from authorized users/systems. The request headers and properties can be accessed via transport properties in the format trp: header . Syntax @source(type= http , receiver.url= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @source(type='http', @map(type = 'json')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://0.0.0.0:9763/StockProcessor/StockStream for JSON messages on the format: { \"event\": { \"symbol\": \"FB\", \"price\": 24.5, \"volume\": 5000 } } It maps the incoming messages and sends them to StockStream for processing. EXAMPLE 2 @source(type='http', receiver.url='http://localhost:5005/stocks', @map(type = 'xml')) define stream StockStream (symbol string, price float, volume long); Above HTTP source listeners on url http://localhost:5005/stocks for JSON messages on the format: events event symbol Fb /symbol price 55.6 /price volume 100 /volume /event /events It maps the incoming messages and sends them to StockStream for processing.","title":"http (Source)"},{"location":"api/latest/#http-call-response-source","text":"The http-call-response source receives the responses for the calls made by its corresponding http-call sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-call-response sources are allowed to associate with a single http-call sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-call-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-call sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-call-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-call-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-call-response (Source)"},{"location":"api/latest/#http-request-source","text":"Deprecated (Use http-service source instead). The http-request source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-request , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-request source to its corresponding http-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-request', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-request (Source)"},{"location":"api/latest/#http-response-source","text":"Deprecated (Use http-call-response source instead). The http-response source receives the responses for the calls made by its corresponding http-request sink, and maps them from formats such as text , XML and JSON . To handle messages with different http status codes having different formats, multiple http-response sources are allowed to associate with a single http-request sink. It allows accessing the attributes of the event that initiated the call, and the response headers and properties via transport properties in the format trp: attribute name and trp: header/property respectively. Syntax @source(type= http-response , sink.id= STRING , http.status.code= STRING , allow.streaming.responses= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic sink.id Identifier to correlate the http-response source with its corresponding http-request sink that published the messages. STRING No No http.status.code The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: http.status.code = '200' , http.status.code = '4\\d+' 200 STRING Yes No allow.streaming.responses Enable consuming responses on a streaming manner. false BOOL Yes No Examples EXAMPLE 1 @sink(type='http-request', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', @map(type='json')) define stream EmployeeRequestStream (name string, id int); @source(type='http-response', sink.id='employee-info', http.status.code='2\\\\d+', @map(type='json', @attributes(name='trp:name', id='trp:id', location='$.town', age='$.age'))) define stream EmployeeResponseStream(name string, id int, location string, age int); @source(type='http-response', sink.id='employee-info', http.status.code='4\\\\d+', @map(type='text', regex.A='((.|\\n)*)', @attributes(error='A[1]'))) define stream EmployeeErrorStream(error string); When events arrive in EmployeeRequestStream , http-request sink makes calls to endpoint on url http://localhost:8005/registry/employee with POST method and Content-Type application/json . If the arriving event has attributes name : John and id : 1423 it will send a message with default JSON mapping as follows: { \"event\": { \"name\": \"John\", \"id\": 1423 } } When the endpoint responds with status code in the range of 200 the message will be received by the http-response source associated with the EmployeeResponseStream stream, because it is correlated with the sink by the same sink.id employee-info and as that expects messages with http.status.code in regex format 2\\\\d+ . If the response message is in the format { \"town\": \"NY\", \"age\": 24 } the source maps the location and age attributes by executing JSON path on the message and maps the name and id attributes by extracting them from the request event via as transport properties. If the response status code is in the range of 400 then the message will be received by the http-response source associated with the EmployeeErrorStream stream, because it is correlated with the sink by the same sink.id employee-info and it expects messages with http.status.code in regex format 4\\\\d+ , and maps the error response to the error attribute of the event.","title":"http-response (Source)"},{"location":"api/latest/#http-service-source","text":"The http-service source receives POST requests via HTTP and HTTPS protocols in format such as text , XML and JSON and sends responses via its corresponding http-service-response sink correlated through a unique source.id . For request and response correlation, it generates a messageId upon each incoming request and expose it via transport properties in the format trp:messageId to correlate them with the responses at the http-service-response sink. The request headers and properties can be accessed via transport properties in the format trp: header . It also supports basic authentication to ensure events are received from authorized users/systems. Syntax @source(type= http-service , receiver.url= STRING , source.id= STRING , connection.timeout= INT , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No source.id Identifier to correlate the http-service source to its corresponding http-service-response sinks to send responses. STRING No No connection.timeout Connection timeout in millis. The system will send a timeout, if a corresponding response is not sent by an associated http-service-response sink within the given time. 120000 INT Yes No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @source(type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', @map(type='json, @attributes(messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'))) define stream AddStream (messageId string, value1 long, value2 long); @sink(type='http-service-response', source.id='adder', message.id='{{messageId}}', @map(type = 'json')) define stream ResultStream (messageId string, results long); @info(name = 'query1') from AddStream select messageId, value1 + value2 as results insert into ResultStream; Above sample listens events on http://localhost:5005/stocks url for JSON messages on the format: { \"event\": { \"value1\": 3, \"value2\": 4 } } Map the vents into AddStream, process the events through query query1 , and sends the results produced on ResultStream via http-service-response sink on the message format: { \"event\": { \"results\": 7 } }","title":"http-service (Source)"},{"location":"api/latest/#sse-source","text":"HTTP SSE source send a request to a given url and listen to the response stream. Syntax @source(type= sse , receiver.url= STRING , basic.auth.username= STRING , basic.auth.password= STRING , worker.count= INT , headers= STRING , https.truststore.file= STRING , https.truststore.password= STRING , client.bootstrap.configurations= STRING , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic receiver.url The sse endpoint url which should be listened. STRING No No basic.auth.username The username to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.password property should be also set when using this property. - STRING Yes No basic.auth.password The password to be included in the authentication header when calling endpoints protected by basic authentication. basic.auth.username property should be also set when using this property. - STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No headers HTTP request headers in format \"' key : value ',' key : value '\" . When the Content-Type header is not provided the system decides the Content-Type based on the provided sink mapper as following: - @map(type='xml') : application/xml - @map(type='json') : application/json - @map(type='text') : plain/text - @map(type='keyvalue') : application/x-www-form-urlencoded - For all other cases system defaults to plain/text Also the Content-Length header need not to be provided, as the system automatically defines it by calculating the size of the payload. Content-Type and Content-Length headers STRING Yes No https.truststore.file The file path of the client truststore when sending messages through https protocol. ${carbon.home}/resources/security/client-truststore.jks STRING Yes No https.truststore.password The password for the client-truststore. wso2carbon STRING Yes No client.bootstrap.configurations Client bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Client connect timeout in millis: 'client.bootstrap.connect.timeout:15000' - Client socket timeout in seconds: 'client.bootstrap.socket.timeout:15' - Client socket reuse: 'client.bootstrap.socket.reuse:true' - Enable TCP no delay: 'client.bootstrap.nodelay:true' - Enable client keep alive: 'client.bootstrap.keepalive:true' - Send buffer size: 'client.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'client.bootstrap.recievebuffersize:1048576' - STRING Yes No System Parameters Name Description Default Value Possible Parameters defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHost The default host of the transport. 0.0.0.0 Any valid host Examples EXAMPLE 1 @Source(type='sse', receiver.url='http://localhost:8080/sse', @map(type='json')) define stream IncomingStream (param1 string); This subscribes to the events which gets published by the SSE server at receiver.url","title":"sse (Source)"},{"location":"api/latest/#websubhub-source","text":"WebSub Hub source receive subscription requests via Http and according to the request, the subscription details will be saved to the given table and against the callback and topic name. The subscription request MUST have a Content-Type header of application/x-www-form-urlencoded and following MUST provide as parameter body. hub.callback - REQUIRED. The subscriber's callback URL where content distribution notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription. hub.mode - REQUIRED. The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request. hub.topic - REQUIRED. The topic URL that the subscriber wishes to subscribe to or unsubscribe from. hub.lease_seconds - OPTIONAL. Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. hub.secret - OPTIONAL. A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest for authorized content distribution. If not supplied, the HMAC digest will not be present for content distribution requests. Syntax @source(type= websubhub , hub.id= STRING , table.name= STRING , receiver.url= STRING , topic.list= STRING , basic.auth.enabled= STRING , worker.count= INT , socket.idle.timeout= INT , ssl.verify.client= STRING , ssl.protocol= STRING , tls.store.type= STRING , ssl.configurations= STRING , request.size.validation.configurations= STRING , header.validation.configurations= STRING , server.bootstrap.configurations= STRING , trace.log.enabled= BOOL , @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic hub.id Unique id for the WebSub Hub STRING No No table.name Table name to store the subscription details related to the hub STRING No No receiver.url The URL on which events should be received. To enable SSL use https protocol in the url. http://0.0.0.0:9763/ appNAme / streamName STRING Yes No topic.list topics allowed in the websub hub empty STRING No No basic.auth.enabled This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the Authorization:'Basic encodeBase64(username:Password)' header. false STRING Yes No worker.count The number of active worker threads to serve the incoming events. By default the value is set to 1 to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of loosing event ordering. 1 INT Yes No socket.idle.timeout Idle timeout for HTTP connection in millis. 120000 INT Yes No ssl.verify.client The type of client certificate verification. Supported values are require , optional . - STRING Yes No ssl.protocol SSL/TLS protocol. TLS STRING Yes No tls.store.type TLS store type. JKS STRING Yes No ssl.configurations SSL/TSL configurations in format \"' key : value ',' key : value '\" . Some supported parameters: - SSL/TLS protocols: 'sslEnabledProtocols:TLSv1.1,TLSv1.2' - List of ciphers: 'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' - Enable session creation: 'client.enable.session.creation:true' - Supported server names: 'server.suported.server.names:server' - Add HTTP SNIMatcher: 'server.supported.snimatchers:SNIMatcher' - STRING Yes No request.size.validation.configurations Configurations to validate the HTTP request size. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable request size validation: 'request.size.validation:true' If request size is validated - Maximum request size: 'request.size.validation.maximum.value:2048' - Response status code when request size validation fails: 'request.size.validation.reject.status.code:401' - Response message when request size validation fails: 'request.size.validation.reject.message:Message is bigger than the valid size' - Response Content-Type when request size validation fails: 'request.size.validation.reject.message.content.type:plain/text' - STRING Yes No header.validation.configurations Configurations to validate HTTP headers. Expected format \"' key : value ',' key : value '\" . Some supported configurations : - Enable header size validation: 'header.size.validation:true' If header size is validated - Maximum length of initial line: 'header.validation.maximum.request.line:4096' - Maximum length of all headers: 'header.validation.maximum.size:8192' - Maximum length of the content or each chunk: 'header.validation.maximum.chunk.size:8192' - Response status code when header validation fails: 'header.validation.reject.status.code:401' - Response message when header validation fails: 'header.validation.reject.message:Message header is bigger than the valid size' - Response Content-Type when header validation fails: 'header.validation.reject.message.content.type:plain/text' - STRING Yes No server.bootstrap.configurations Server bootstrap configurations in format \"' key : value ',' key : value '\" . Some supported configurations : - Server connect timeout in millis: 'server.bootstrap.connect.timeout:15000' - Server socket timeout in seconds: 'server.bootstrap.socket.timeout:15' - Enable TCP no delay: 'server.bootstrap.nodelay:true' - Enable server keep alive: 'server.bootstrap.keepalive:true' - Send buffer size: 'server.bootstrap.sendbuffersize:1048576' - Receive buffer size: 'server.bootstrap.recievebuffersize:1048576' - Number of connections queued: 'server.bootstrap.socket.backlog:100' - STRING Yes No trace.log.enabled Enable trace log for traffic monitoring. false BOOL Yes No System Parameters Name Description Default Value Possible Parameters serverBootstrapBossGroupSize Number of boss threads to accept incoming connections. Number of available processors Any positive integer serverBootstrapWorkerGroupSize Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels. (Number of available processors) * 2 Any positive integer serverBootstrapClientGroupSize Number of client threads to perform non-blocking read and write to one or more channels. (Number of available processors) * 2 Any positive integer defaultHost The default host of the transport. 0.0.0.0 Any valid host defaultScheme The default protocol. http http https defaultHttpPort The default HTTP port when default scheme is http . 8280 Any valid port defaultHttpsPort The default HTTPS port when default scheme is https . 8243 Any valid port keyStoreLocation The default keystore file path. ${carbon.home}/resources/security/wso2carbon.jks Path to .jks file keyStorePassword The default keystore password. wso2carbon Keystore password as string Examples EXAMPLE 1 @app.name('StockProcessor') @store(type='rdbms' , jdbc.url='jdbc:mysql://localhost:3306/production?useSSL=false', username='root', password='root', jdbc.driver.name='com.mysql.jdbc.Driver') @source(type='websubhub' , hub.id='anu_123',table.name='SessionTable', receiver.url='http://localhost:8006/productionStream',basic.auth.enabled='false', @map(type='keyvalue',implicit.cast.enable='true')) define stream webSubStream(callback string, lease_seconds long, secret string, topic string, mode string); Above WebSubHub listening on http://localhost:8006/productionStream for thesubscription requests.","title":"websubhub (Source)"}]}